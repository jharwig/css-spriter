(ns css-sprite.core
  (:require [clojure.contrib.seq-utils :as seq-utils]
  					[clojure.contrib.duck-streams :as io])  
	(:import (java.io File 
										FilenameFilter)
					 (javax.imageio ImageIO)
					 (java.awt Color image.BufferedImage)))
  
(defprotocol Layout
  (sprite-dimensions [l images])
  (with-coordinates [l images]))

; TODO: refactor to simple to that accepts paramter :vertical, :horizontal
(deftype Vertical []
  :as this
  Layout
  (sprite-dimensions [i]
  	(let [images (with-coordinates this i)
  		    max-width (apply max (map #((:dimensions %1) 0) images))
  		    total-height (+ 
  		    						 	((:coordinates (last images)) 1)
  		    						 	((:dimensions (last images)) 1))]
  		[max-width total-height]))
  (with-coordinates [images]
  	(if (contains? (first images) :coordinates)
  		images
  		(let [heights (map #((:dimensions %1) 1) images)
	  	      y-positions (conj heights 0)]
				(for [[i image] (seq-utils/indexed images)]
					(merge image {:coordinates [0 (reduce + (take (inc i) y-positions))]}))))))

(deftype Horizontal []
  :as this
  Layout
  (sprite-dimensions [i]
  	(let [images (with-coordinates this i)
  		    max-height (apply max (map #((:dimensions %1) 1) images))
  		    total-width (+ 
  		    						 	((:coordinates (last images)) 0)
  		    						 	((:dimensions (last images)) 0))]
  		[total-width max-height]))
  (with-coordinates [images]
  	(if (contains? (first images) :coordinates)
  		images
  		(let [widths (map #((:dimensions %1) 0) images)
	  	      x-positions (conj widths 0)]
				(for [[i image] (seq-utils/indexed images)]
					(merge image {:coordinates [(reduce + (take (inc i) x-positions)) 0]}))))))

(def layouts {:vertical (Vertical) :horizontal (Horizontal)})

	  
(defn get-images 
	"Given a directory, return a map of all png images with a buffered image and dimensions"
	[dir]
	(let [d (io/file-str dir)]
		(when (.exists d)
			(map 
				(fn [file]
					(let [bi (ImageIO/read file)]
						{:buffered-image bi :path (.getPath file) :dimensions [(.getWidth bi) (.getHeight bi)]}))
				(filter 
					#(re-matches #".*\.png$" (.getName %1)) 
					(file-seq d))))))
					
(defn combine-images
	"Given the images and a layout type, create a sprite png at the output location"
	[images layout-type output]
	(let [layout						(layout-type layouts)
		    positioned-images (with-coordinates layout images)
		    output-dimensions (sprite-dimensions layout positioned-images) 
		    output-image      (BufferedImage. (output-dimensions 0) (output-dimensions 1) BufferedImage/TYPE_INT_ARGB)
				graphics          (.createGraphics output-image)]
		(doseq [image positioned-images]
			(.drawImage graphics (:buffered-image image) ((:coordinates image) 0) ((:coordinates image) 1) nil))
		(ImageIO/write output-image "png" (io/file-str output))
		positioned-images))
		

(defn image->class-name
	[image]
	(:path image))

(defprotocol CssWriter
  (write-css-selector [c image]))

(deftype Verbose [writer]
  :as this
  CssWriter
  (write-css-selector [image]
  	(let [class-name (str "." (image->class-name image))] 
		(.println writer (str class-name " {"))
		(.println writer (str "  width: " ((:dimensions image) 0) "px;"))
		(.println writer (str "  height: " ((:dimensions image) 1) "px;"))
		(.println writer (str "  background-position: "  ((:coordinates image) 0) "px " ((:coordinates image) 1) "px;"))
		(.println writer "}"))))
		
(def outputs {:verbose Verbose})

(defn write-css
  ([images]
  	(write-css images :vertical))
  ([images layout-type]
  	(write-css images layout-type "sprite.css"))
  ([images layout-type output]
  	(write-css images layout-type output :verbose))
	([images layout-type output output-type]
	(with-open [writer (io/writer (io/file-str output))]
			(.println writer (str "/* CSS Sprite File Generated by CSS-SPRITE.clj on " (java.util.Date.) " ...*/\n"))
			(let [css-writer ((output-type outputs) writer)]
				(count (for [image (with-coordinates (layout-type layouts) images)]
				(write-css-selector css-writer image)))))))
				
(defn gen-sprite
	[images-dir output-png output-css]
	(write-css
		(combine-images (get-images images-dir) :vertical output-png)
		:vertical
		output-css))
			
			
			
			