(ns spriter.core
  (:gen-class)
  (:use     (spriter util layout writer))
  (:require [clojure.contrib.duck-streams :as io])
  (:import (java.io       File
                          FilenameFilter)
           (javax.imageio ImageIO)
           (java.awt      Color
                          image.BufferedImage)))

(defn get-images
  "Given a directory, return a map of all png images with a buffered image and dimensions"
  [dir]
  (let [d (file-str dir)]
    (when (.exists d)
      (map
        (fn [file]
          (let [bi (ImageIO/read file)]
            {:buffered-image bi :path (.replaceAll (.getPath file) dir "") :dimensions [(.getWidth bi) (.getHeight bi)]}))
        (filter
          #(re-matches #"(?i).*\.png$" (.getName %1))
          (file-seq d))))))

(defn combine-images
  "Given the images and a layout type, create a sprite png at the output location"
  [images layout-type output]
  (let [layout              (layout-type layouts)
          positioned-images (with-coordinates layout images)
          output-dimensions (sprite-dimensions layout positioned-images)
          output-image      (BufferedImage. (output-dimensions 0) (output-dimensions 1) BufferedImage/TYPE_INT_ARGB)
              graphics          (.createGraphics output-image)]
      (doseq [image positioned-images]
          (.drawImage graphics (:buffered-image image) ((:coordinates image) 0) ((:coordinates image) 1) nil))
      (ImageIO/write output-image "png" (file-str output))
      positioned-images))

(defn write-css
  "Generate a CSS file given the image coordinates and layout type"
  [images layout-type output output-type]
  (with-open [writer (io/writer (file-str output))]
    (.println writer (str "/* CSS Sprite File Generated by css-spriter on " (java.util.Date.) " ...*/\n" ))
    (let [css-writer (output-type outputs)]
      (println (str "Generated sprite PNG with "
        (count (for [image (with-coordinates (layout-type layouts) images)] (write-css-selector css-writer writer image)))
        " images")))))


(defn gen-sprite
    "Generate a PNG and CSS file for the directory of images
    
    Options
     :png - the output graphic file
     :css - the output css file
     :layout - format of the graphic :vertical or :horizontal
     :output - format of the css :verbose or :compact"
    [images-dir & options]
    (let [defaults {:png "sprite.png"
                    :css "sprite.css"
                    :layout :vertical
                    :output :compact}
                opts (if options (apply assoc defaults options) defaults)]
      (write-css
          (combine-images (get-images images-dir) (:layout opts) (:png opts))
          (:layout opts)
          (:css opts)
          (:output opts))))

(defn -main [& args]
  (let [args (map #(if (.startsWith %1 ":") (str->keyword %1) %1) args)]
    (if (< (count args) 1)
      (println "Usage: java -jar css-spriter.jar [images-dir] [options]")
      (apply gen-sprite args))))
