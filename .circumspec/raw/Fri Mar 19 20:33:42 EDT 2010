{:nsec 4073000, :success 1, :story [], :context (css-sprite.core-test), :name "get images"}
{:failure 1, :name "positions", :context (css-sprite.core-test), :story [], :locals {positions [[0 0] ([16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16])], images ({:image #<BufferedImage BufferedImage@6c03f4f7: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@51b12677: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@6f077e50: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@38172641: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@d743d55: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@2c2c68e9: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@3df9dfd5: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@40471d1f: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@84fc04d: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@2a1ffa9f: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]}), heights (0 [16 16])}, :expected (= (count images) (count (seq positions)) (count heights)), :actual (not (= 10 2 2))}
{:throwable #<ClassCastException java.lang.ClassCastException: clojure.lang.LazySeq cannot be cast to clojure.lang.IPersistentStack>, :error 1, :story [], :context (css-sprite.core-test), :name "combine"}
