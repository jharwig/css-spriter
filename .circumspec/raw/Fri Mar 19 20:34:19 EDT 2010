{:nsec 4552000, :success 1, :story [], :context (css-sprite.core-test), :name "get images"}
{:failure 1, :name "positions", :context (css-sprite.core-test), :story [], :locals {positions [[0 0] ([16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16])], images ({:image #<BufferedImage BufferedImage@39dc44b6: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@4fd0ff95: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@b317ad9: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@102ccb33: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@424ab04d: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@166f51b7: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@4b65bb0c: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@5a23a052: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@1d5caa7a: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@4f0015bc: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]}), heights (0 [16 16])}, :expected (= (inc (count images)) (count (seq positions)) (count heights)), :actual (not (= 11 2 2))}
{:throwable #<ClassCastException java.lang.ClassCastException: clojure.lang.LazySeq cannot be cast to clojure.lang.IPersistentStack>, :error 1, :story [], :context (css-sprite.core-test), :name "combine"}
