{:nsec 4027000, :success 1, :story [], :context (css-sprite.core-test), :name "get images"}
{:failure 1, :name "positions", :context (css-sprite.core-test), :story [], :locals {positions [[0 0] ([16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16] [16 16])], images ({:image #<BufferedImage BufferedImage@10e156cd: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@b881485: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@1b754fb1: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@6e24192b: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@13159de7: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@46e6e5f1: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@110fbbf2: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@7acc53cc: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@41282ad4: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]} {:image #<BufferedImage BufferedImage@461541fb: type = 0 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@7049cca1 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 16 height = 16 #numDataElements 4 dataOff[0] = 0>, :dimensions [16 16]}), heights (0 [16 16])}, :expected (= (count images) (count (seq positions)) (count heights)), :actual (not (= 10 2 2))}
{:throwable #<ClassCastException java.lang.ClassCastException: clojure.lang.LazySeq cannot be cast to clojure.lang.IPersistentStack>, :error 1, :story [], :context (css-sprite.core-test), :name "combine"}
